import java.util.*;
public class Solution{
    static void dfs(int node,HashMap<Integer,ArrayList<Integer>> adj,int parent,
    int disc[],int low[],List<List<Integer>> ans,int timer,boolean visited[]){
        visited[node]=true;
        disc[node]=low[node]=timer++;
        for(int neighbour:adj.get(node)){
            if(neighbour==parent)
            continue;
            if(!visited[neighbour]){
                dfs(neighbour,adj,node,disc,low,ans,timer,visited);
                low[node]=Math.min(low[node],low[neighbour]);
                if(low[neighbour]>disc[node]){
                    List<Integer> arr=new ArrayList<>();
                    arr.add(node);
                    arr.add(neighbour);
                    ans.add(arr);
                }
            }
            else
            low[node]=Math.min(low[node],disc[neighbour]);
        }
    }
    public static List<List<Integer>> findBridges(int[][] edges, int v, int e){
        // Write your code here!
        HashMap<Integer,ArrayList<Integer>> adj=new HashMap<>();
        for(int i=0;i<v;i++){
            adj.put(i,new ArrayList<>());
        } 
        for(int i=0;i<edges.length;i++){
            int u=edges[i][0],x=edges[i][1];
            adj.get(u).add(x);
            adj.get(x).add(u);
        }
        int timer=0,parent=-1;
        int disc[]=new int[v],low[]=new int[v];
        boolean visited[]=new boolean[v];
        Arrays.fill(disc,-1);
        Arrays.fill(low,-1);
        List<List<Integer>> ans=new ArrayList<>();
        for(int i=0;i<v;i++){
            if(!visited[i])
            dfs(i,adj,parent,disc,low,ans,timer,visited);
        }
        return ans;
    }
}
